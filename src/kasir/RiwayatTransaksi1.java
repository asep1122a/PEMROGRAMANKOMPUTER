/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package kasir;

import app.koneksi;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;


/**
 *
 * @author asus
 */
public class RiwayatTransaksi1 extends javax.swing.JPanel {

    /**
     * Creates new form RiwayatTransaksi
     */
    public RiwayatTransaksi1() {
        initComponents();
        loadRiwayatTransaksi();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        tglDari = new com.toedter.calendar.JDateChooser();
        tglSampai = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        refresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRiwayatTransaksi = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jButton1.setText("View");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Dari");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Sampai");

        refresh.setText("refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tglDari, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tglSampai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 380, Short.MAX_VALUE)
                        .addComponent(refresh)
                        .addGap(94, 94, 94))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(refresh)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tglSampai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tglDari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33))
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jTableRiwayatTransaksi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No", "Tanggal Transaksi", "Id Transaksi", "Nama Produk", "Kuantitas", "Harga Satuan", "Total Harga", "Kasir"
            }
        ));
        jScrollPane1.setViewportView(jTableRiwayatTransaksi);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        viewRiwayatTransaksi();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
        loadRiwayatTransaksi();
    }//GEN-LAST:event_refreshActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableRiwayatTransaksi;
    private javax.swing.JButton refresh;
    private com.toedter.calendar.JDateChooser tglDari;
    private com.toedter.calendar.JDateChooser tglSampai;
    // End of variables declaration//GEN-END:variables

   private void loadRiwayatTransaksi() {
    DefaultTableModel model = (DefaultTableModel) jTableRiwayatTransaksi.getModel();
    model.setRowCount(0);

    try {
        Connection conn = koneksi.Go();
        // Query baru sesuai dengan perubahan
        String sql = "SELECT " +
                     "ROW_NUMBER() OVER (ORDER BY t.tanggal_transaksi DESC, t.id_transaksi) AS no, " +
                     "t.tanggal_transaksi, " +
                     "t.id_transaksi, " +
                     "p.nama_produk, " +
                     "d.jumlah_produk, " +
                     "p.harga_jual, " +
                     "(d.jumlah_produk * p.harga_jual) AS total_harga, " +
                     "pr.nama_lengkap AS nama_kasir " +
                     "FROM transaksi t " +
                     "JOIN transaksi_detail d ON t.id_transaksi = d.id_transaksi " +
                     "JOIN produk p ON d.id_produk = p.id_produk " +
                     "JOIN akun a ON t.id_akun = a.id_akun " +
                     "JOIN profil pr ON a.id_akun = pr.id_akun " +
                     "WHERE t.tanggal_transaksi >= CURDATE() - INTERVAL 3 DAY " +
                     "ORDER BY t.tanggal_transaksi DESC, t.id_transaksi";

        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            // Ambil data dari hasil query
            int no = rs.getInt("no");
            String tanggal = rs.getString("tanggal_transaksi");
            String idTransaksi = rs.getString("id_transaksi");
            String namaProduk = rs.getString("nama_produk");
            int kuantitas = rs.getInt("jumlah_produk");
            int hargaSatuan = rs.getInt("harga_jual");
            int totalHarga = rs.getInt("total_harga");
            String namaKasir = rs.getString("nama_kasir");

            // Tambahkan data ke tabel model
            model.addRow(new Object[]{no, tanggal, idTransaksi, namaProduk, kuantitas, hargaSatuan, totalHarga, namaKasir});
        }

        // Tutup resource
        rs.close();
        stmt.close();
        conn.close();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Gagal memuat data riwayat transaksi!", "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
}

    private void viewRiwayatTransaksi() {
    DefaultTableModel model = (DefaultTableModel) jTableRiwayatTransaksi.getModel();
    model.setRowCount(0);

    // Ambil nilai dari JDateChooser
    java.util.Date dateFrom = tglDari.getDate();
    java.util.Date dateTo = tglSampai.getDate();

    if (dateFrom == null || dateTo == null) {
        JOptionPane.showMessageDialog(this, "Harap pilih tanggal awal dan tanggal akhir!", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Format tanggal ke bentuk SQL (yyyy-MM-dd)
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    String dariTanggal = sdf.format(dateFrom);
    String sampaiTanggal = sdf.format(dateTo);

    try {
        Connection conn = koneksi.Go();
        String sql = "SELECT " +
                     "ROW_NUMBER() OVER (ORDER BY t.tanggal_transaksi DESC, t.id_transaksi) AS no, " +
                     "t.tanggal_transaksi, " +
                     "t.id_transaksi, " +
                     "p.nama_produk, " +
                     "d.jumlah_produk, " +
                     "p.harga_jual, " +
                     "(d.jumlah_produk * p.harga_jual) AS total_harga, " +
                     "pr.nama_lengkap AS nama_kasir " +
                     "FROM transaksi t " +
                     "JOIN transaksi_detail d ON t.id_transaksi = d.id_transaksi " +
                     "JOIN produk p ON d.id_produk = p.id_produk " +
                     "JOIN akun a ON t.id_akun = a.id_akun " +
                     "JOIN profil pr ON a.id_akun = pr.id_akun " +
                     "WHERE t.tanggal_transaksi BETWEEN ? AND ? " + // Filter berdasarkan interval tanggal
                     "ORDER BY t.tanggal_transaksi DESC, t.id_transaksi";

        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, dariTanggal);  // Set parameter tanggal awal
        stmt.setString(2, sampaiTanggal); // Set parameter tanggal akhir
        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            // Ambil data dari hasil query
            int no = rs.getInt("no");
            String tanggal = rs.getString("tanggal_transaksi");
            String idTransaksi = rs.getString("id_transaksi");
            String namaProduk = rs.getString("nama_produk");
            int kuantitas = rs.getInt("jumlah_produk");
            int hargaSatuan = rs.getInt("harga_jual");
            int totalHarga = rs.getInt("total_harga");
            String namaKasir = rs.getString("nama_kasir");

            // Tambahkan data ke tabel model
            model.addRow(new Object[]{no, tanggal, idTransaksi, namaProduk, kuantitas, hargaSatuan, totalHarga, namaKasir});
        }

        // Tutup resource
        rs.close();
        stmt.close();
        conn.close();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Gagal memuat data riwayat transaksi!", "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
}



}
