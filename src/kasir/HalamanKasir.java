/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package kasir;

import kasir.nota;
import app.koneksi;
import app.login;
import app.Profiluser;
import java.awt.Frame;
import java.awt.Image;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LENOVO
 */
public class HalamanKasir extends javax.swing.JFrame {

    private Profiluser pr; // Pastikan ini dideklarasikan
    private int idKasir;

    public HalamanKasir(Profiluser profilUser) {
        this.pr = profilUser; // Inisialisasi objek pr
        initComponents();

        name_login.setText(pr.getNama());
        role_login.setText(pr.getRole());
        tabelset();

    }

    private HalamanKasir() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void tabelset() {
        jTable1.getColumnModel().getColumn(0).setMinWidth(0);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        name_login = new javax.swing.JLabel();
        role_login = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        uang = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));
        jPanel1.setPreferredSize(new java.awt.Dimension(850, 80));

        name_login.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 16)); // NOI18N
        name_login.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        name_login.setText("jLabel1");

        role_login.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 14)); // NOI18N
        role_login.setForeground(new java.awt.Color(255, 153, 255));
        role_login.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        role_login.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(name_login, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(role_login, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(831, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(name_login)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(role_login)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel7.setBackground(new java.awt.Color(255, 204, 204));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jTextField1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 135;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 0);
        jPanel7.add(jTextField1, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel3.setText("Kode Produk");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 6, 0, 0);
        jPanel7.add(jLabel3, gridBagConstraints);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nama Produk", "Jumlah", "Harga", "Total"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 984;
        gridBagConstraints.ipady = 355;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(18, 0, 0, 0);
        jPanel7.add(jScrollPane3, gridBagConstraints);

        jButton3.setBackground(new java.awt.Color(255, 51, 0));
        jButton3.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Hapus");
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 0, 0);
        jPanel7.add(jButton3, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Total :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 14, 0, 0);
        jPanel7.add(jLabel4, gridBagConstraints);

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 204));
        jLabel5.setText("Rp. 0,-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 6, 0, 0);
        jPanel7.add(jLabel5, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Uang :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 31;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        jPanel7.add(jLabel10, gridBagConstraints);

        uang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uangActionPerformed(evt);
            }
        });
        uang.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                uangKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 139;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 6, 0, 0);
        jPanel7.add(uang, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        jLabel11.setText("Kembali :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 14, 0, 0);
        jPanel7.add(jLabel11, gridBagConstraints);

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 204));
        jLabel12.setText("Rp. 0,-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 5, 0);
        jPanel7.add(jLabel12, gridBagConstraints);

        jButton2.setBackground(new java.awt.Color(0, 0, 204));
        jButton2.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Checkout");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 505, 0, 0);
        jPanel7.add(jButton2, gridBagConstraints);

        getContentPane().add(jPanel7, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Menu");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Laporan Keuangan");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem3.setText("RiwayatTransaksi");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Setting");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("LogOut");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        removeProductFromCart();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        String val = jTextField1.getText();
        try {
            if (!val.isEmpty()) {
                int bayar = Integer.parseInt(val); // Validasi input
                String TH = jLabel5.getText();
                String[] arrTH = TH.split(" ");
                int totalH = Integer.parseInt(arrTH[1]);

                if (bayar >= totalH) {
                    long sisa = bayar - totalH;
                    jLabel12.setText("Rp " + sisa);
                    enableCheckoutBtn(true);
                } else {
                    jLabel12.setText("Rp 0");
                    enableCheckoutBtn(false);
                }
            } else {
                jLabel12.setText("Rp 0");
                enableCheckoutBtn(false);
            }
        } catch (NumberFormatException e) {
            jLabel12.setText("Rp 0");
            enableCheckoutBtn(false);
        }

        String kode = jTextField1.getText();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        try (Connection K = koneksi.Go()) {
            String query = "SELECT id_produk, nama_produk, harga_jual, stok FROM produk WHERE kode_produk = ?";
            PreparedStatement ps = K.prepareStatement(query);
            ps.setString(1, kode);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                int id = rs.getInt("id_produk");
                String pName = rs.getString("nama_produk");
                double pPr = rs.getDouble("harga_jual");
                int availableStock = rs.getInt("stok");

                boolean exists = false;
                int rowIndex = -1;

                for (int i = 0; i < model.getRowCount(); i++) {
                    int currentId = Integer.parseInt(model.getValueAt(i, 0).toString());
                    if (currentId == id) {
                        exists = true;
                        rowIndex = i;
                        break;
                    }
                }

                if (exists) {
                    // Update kuantitas dan harga total jika stok mencukupi
                    int currentQty = Integer.parseInt(model.getValueAt(rowIndex, 2).toString());
                    int newQty = currentQty + 1;

                    if (newQty <= availableStock) {
                        model.setValueAt(newQty, rowIndex, 2); // Update kuantitas
                        model.setValueAt(newQty * pPr, rowIndex, 4); // Update total harga
                    } else {
                        JOptionPane.showMessageDialog(this, "Stok tidak mencukupi! Tersedia: " + availableStock);
                    }
                } else {
                    // Tambahkan produk baru jika stok tersedia
                    if (availableStock > 0) {
                        Object[] data = {id, pName, 1, pPr, pPr};
                        model.addRow(data);
                    } else {
                        JOptionPane.showMessageDialog(this, "Stok tidak tersedia untuk produk: " + pName);
                    }
                }
            }

            updateharga();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Kesalahan database: " + e.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
        }

// Tambahkan listener untuk perubahan tabel
        model.addTableModelListener(e -> {
            int row = e.getFirstRow();
            int column = e.getColumn();

            if (column == 2 && row >= 0) {
                try {
                    int qty = Integer.parseInt(jTable1.getValueAt(row, 2).toString());
                    double price = Double.parseDouble(jTable1.getValueAt(row, 3).toString());

                    // Cek stok dari database
                    try (Connection K = koneksi.Go()) {
                        String stockQuery = "SELECT stok FROM produk WHERE id_produk = ?";
                        PreparedStatement ps = K.prepareStatement(stockQuery);
                        ps.setInt(1, Integer.parseInt(jTable1.getValueAt(row, 0).toString()));
                        ResultSet rs = ps.executeQuery();

                        if (rs.next()) {
                            int availableStock = rs.getInt("stok");

                            if (qty > 0 && qty <= availableStock) {
                                jTable1.setValueAt(qty * price, row, 4); // Update total harga
                                updateharga();
                            } else if (qty > availableStock) {
                                JOptionPane.showMessageDialog(null, "Stok tidak mencukupi!");
                                jTable1.setValueAt(1, row, 2); // Reset ke nilai default
                            }
                        }
                    }

                } catch (NumberFormatException | SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Kuantitas tidak valid atau kesalahan database!");
                    jTable1.setValueAt(1, row, 2); // Reset ke nilai default
                }
            }
        });

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void uangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uangActionPerformed

    }//GEN-LAST:event_uangActionPerformed

    private void uangKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_uangKeyReleased
        UangPembayaran();
    }//GEN-LAST:event_uangKeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        checkout();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int response = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin logout?", "Konfirmasi Logout", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {
            // Menutup halaman admin dan membuka halaman login jika pengguna memilih "Yes"
            this.setVisible(false);
            login loginPage = new login();
            loginPage.setVisible(true);
            loginPage.setExtendedState(Frame.MAXIMIZED_BOTH);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped

    }//GEN-LAST:event_jTextField1KeyTyped

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        LaporanHarian LH = new LaporanHarian();
        LH.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
//        this.setVisible(false);
        RiwayatTransaksi1 rt = new RiwayatTransaksi1();
        rt.setVisible(true);

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        String val = jTextField1.getText();
        try {
            if (!val.isEmpty()) {
                // Validasi input
                int bayar = Integer.parseInt(val);

                // Mendapatkan nilai total harga
                String TH = jLabel5.getText();
                String[] arrTH = TH.split(" ");

                if (arrTH.length > 1) { // Pastikan format teks benar
                    int totalH = Integer.parseInt(arrTH[1]);

                    // Cek apakah pembayaran mencukupi
                    if (bayar >= totalH) {
                        long sisa = bayar - totalH;
                        jLabel12.setText("Rp " + sisa);
                        enableCheckoutBtn(true);
                    } else {
                        jLabel12.setText("Rp 0");
                        enableCheckoutBtn(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Format total harga tidak valid!", "Kesalahan", JOptionPane.ERROR_MESSAGE);
                    jLabel12.setText("Rp 0");
                    enableCheckoutBtn(false);
                }
            } else {
                jLabel12.setText("Rp 0");
                enableCheckoutBtn(false);
            }
        } catch (NumberFormatException e) {
            jLabel12.setText("Rp 0");
            enableCheckoutBtn(false);
        }

    }//GEN-LAST:event_jTextField1KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HalamanKasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HalamanKasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HalamanKasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HalamanKasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HalamanKasir().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane3;
    private static javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel name_login;
    private javax.swing.JLabel role_login;
    private javax.swing.JTextField uang;
    // End of variables declaration//GEN-END:variables
public void setLabelFullname(String nama) {
        name_login.setText(nama);
    }

    public void setLabelLevel(String role) {
        role_login.setText(role);
    }

    public void updateUser(Profiluser Up) {
        this.pr = Up;
//        this.path_gambar = path_gambar;
        name_login.setText(pr.getNama());
        role_login.setText(pr.getRole());
//        setProfileImage();
    }

    private void updateharga() {
        try {
            double totalHarga = 0;
            int rowcount = jTable1.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                double QTY = Double.parseDouble(jTable1.getValueAt(i, 2).toString());
                double PRC = Double.parseDouble(jTable1.getValueAt(i, 3).toString());
                totalHarga += (QTY * PRC);
            }
            jLabel5.setText("Rp " + (long) totalHarga);
        } catch (NumberFormatException e) {
        }
    }

    private void removeProductFromCart() {
        int idx = jTable1.getSelectedRow();
        if (idx != -1) {
            DefaultTableModel m = (DefaultTableModel) jTable1.getModel();
            m.removeRow(idx);
            updateharga();
        } else {
            JOptionPane.showMessageDialog(this, "Anda belum memilihi data");
        }
    }

    private void UangPembayaran() {
        int r = jTable1.getRowCount();
        if (r > 0) {
            String lbl = jLabel5.getText(); // Rp 12000
            String[] arrayHarga = lbl.split(" ");
            long harga = Long.parseLong(arrayHarga[1]);

            String bayar = uang.getText();
            if (!bayar.isEmpty()) {
                long uangbayar = Long.parseLong(bayar);
                long uangkembali = uangbayar - harga;
                jLabel12.setText("Rp " + uangkembali);

                // Enable checkout button only if payment is sufficient
                jButton2.setEnabled(uangbayar >= harga);
            } else {
                jLabel12.setText("Rp " + 0);
                jButton2.setEnabled(false);
            }
        }
    }

    private void enableCheckoutBtn(boolean b) {
        jButton2.setEnabled(b);
    }

private void checkout() {
    Connection K = null;
    PreparedStatement insertTransaksi = null;
    PreparedStatement insertDetailTransaksi = null;
    PreparedStatement updateStok = null;
    String uang_kembali = jLabel12.getText();
    String uang_pembayaran = uang.getText();

    // Validasi input uang pembayaran
    if (uang_pembayaran.isEmpty() || !uang_pembayaran.matches("\\d+")) {
        JOptionPane.showMessageDialog(this, "Input uang pembayaran tidak valid!", "Kesalahan", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        K = koneksi.Go();
        if (K == null) {
            JOptionPane.showMessageDialog(this, "Koneksi ke database gagal!", "Kesalahan", JOptionPane.ERROR_MESSAGE);
            return;
        }
        K.setAutoCommit(false);

        SimpleDateFormat SDF = new SimpleDateFormat("yyyy-MM-dd");
        String tanggalTransaksi = SDF.format(new Date());
        int idKasir = pr.getId_akun();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        double totalTransaksi = 0;
        for (int i = 0; i < model.getRowCount(); i++) {
            int qty = Integer.parseInt(model.getValueAt(i, 2).toString());
            double harga = Double.parseDouble(model.getValueAt(i, 3).toString());
            totalTransaksi += qty * harga;
        }

        // Masukkan data ke tabel transaksi
        String insertTransaksiQuery = "INSERT INTO transaksi (id_akun, tanggal_transaksi, total_harga) VALUES (?, ?, ?)";
        insertTransaksi = K.prepareStatement(insertTransaksiQuery, Statement.RETURN_GENERATED_KEYS);
        insertTransaksi.setInt(1, idKasir);
        insertTransaksi.setString(2, tanggalTransaksi);
        insertTransaksi.setDouble(3, totalTransaksi);
        
        // Eksekusi query dan tangkap exception
        try {
            insertTransaksi.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Kesalahan saat menyimpan transaksi: " + e.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Ambil ID transaksi yang baru saja dibuat
        ResultSet rs = insertTransaksi.getGeneratedKeys();
        int idTransaksi = 0;
        if (rs.next()) {
            idTransaksi = rs.getInt(1);
        }

        // Masukkan data ke tabel detail_transaksi
        String insertDetailTransaksiQuery = "INSERT INTO transaksi_detail (id_transaksi, id_produk, id_kasir, jumlah_produk, harga_satuan, total_harga_produk, tanggal_transaksi) VALUES (?, ?, ?, ?, ?, ?, ?)";
        insertDetailTransaksi = K.prepareStatement(insertDetailTransaksiQuery);

        String updateStokQuery = "UPDATE produk SET stok = stok - ? WHERE id_produk = ?";
        updateStok = K.prepareStatement(updateStokQuery);

        for (int i = 0; i < model.getRowCount(); i++) {
            int idProduk = Integer.parseInt(model.getValueAt(i, 0).toString());
            int qty = Integer.parseInt(model.getValueAt(i, 2).toString());
            double harga = Double.parseDouble(model.getValueAt(i, 3).toString());
            double totalHargaDetail = qty * harga;

            // Masukkan detail transaksi
            insertDetailTransaksi.setInt(1, idTransaksi);
            insertDetailTransaksi.setInt(2, idProduk);
            insertDetailTransaksi.setInt(3, idKasir);
            insertDetailTransaksi.setInt(4, qty);
            insertDetailTransaksi.setDouble(5, harga);
            insertDetailTransaksi.setDouble(6, totalHargaDetail);
            insertDetailTransaksi.setString(7, tanggalTransaksi);
            insertDetailTransaksi.executeUpdate();

            // Update stok produk
            updateStok.setInt(1, qty);
            updateStok.setInt(2, idProduk);
            updateStok.executeUpdate();
        }

        // Commit transaksi
        K.commit();

        // Tampilkan nota
        Nota1 nt = new Nota1(this, true);
        nt.setData(pr.getNama(), tanggalTransaksi, idTransaksi, totalTransaksi, model, uang_kembali, uang_pembayaran);
        nt.setVisible(true);

        // Reset tabel keranjang
        model.setRowCount(0);
    } catch (SQLException e) {
        // Rollback jika terjadi kesalahan
        if (K != null) {
            try {
                K.rollback();
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan. Transaksi dibatalkan: " + e.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Gagal melakukan rollback: " + ex.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
            }
        }
    } finally {
        // Tutup semua resource
        try {
            if (insertTransaksi != null) insertTransaksi.close();
            if (insertDetailTransaksi != null) insertDetailTransaksi.close();
            if (updateStok != null) updateStok.close();
            if (K != null) K.setAutoCommit(true); // Kembalikan ke auto-commit
            if (K != null) K.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal menutup koneksi: " + e.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
        }
    }
}
}
